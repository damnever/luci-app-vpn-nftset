#!/bin/sh

usage() {
    cat <<-EOF
Usage: $0 [OPTIONS]

OPTIONS:
    -w <gfwlist_url>       the GFWList url.
    -u <domainlist_url>    the domain list url, format: one domain for line.
    -s <dns_server>        the DNS server.
    -i <nftsets>           the nftset for dnsmasq, e.g. 4#inet#table#nftset_name.
    -d <dnsmasq_conf.d>    the dnsmasq config directory.
    -h                     print this message.
EOF
    exit "$1"
}

BASE64_DECODE_CMD="base64 -d"
SED_ERES="sed -r"
if [ "$(uname -s)" = "Darwin" ]; then
    BASE64_DECODE_CMD="base64 -D -i"
    echo "NOTE: brew install gnu-sed; brew info gnu-sed"
fi
DNS_SERVERS=""
NFTSET_NAMES=""
DNSMASQ_CONFD="/tmp/dnsmasq.d"
_SED_PATTERN_TIDY=""


generate_sed_tidy_pattern_from_config_file() {
    tmpfile=$(mktemp)
    for file in "$DNSMASQ_CONFD"/vpn-nftset*.conf; do
        case "$file" in
            "$DNSMASQ_CONFD"/vpn-nftset-gen_*.conf) continue ;;
        esac
        while IFS= read -r line; do
            part=$(echo "$line" | awk -F'=' '{print $2}')
            domain=$(echo "$part" | awk -F'/' '{print $2}')
            echo "$domain" >> "$tmpfile"
        done < "$file"
    done

    if [ -s "$tmpfile" ]; then
        _custom_domains=$(sort < "$tmpfile" | uniq | tr '\n' '|' | sed 's/\./\\./g')
        _suffix="|"
        _custom_domains="${_custom_domains%"$_suffix"}"

        _SED_PATTERN_TIDY="/^(server=\/|nftset=\/).*?($_custom_domains)\//d"
    fi
    rm "$tmpfile"
}


apply_domains() {
    infile=$1
    outfile="$DNSMASQ_CONFD/vpn-nftset-gen_$2.conf.new"
    if [ -n "$DNS_SERVERS" ]; then
        grep -v '^ *#' < "$infile" | while IFS= read -r domain; do
            if [ -n "$DNS_SERVERS" ]; then
                echo "server=/${domain}/${DNS_SERVERS}" >> "${outfile}"
            fi
            echo "nftset=/${domain}/${NFTSET_NAMES}" >> "${outfile}"
        done
    fi

    if [ -n "$_SED_PATTERN_TIDY" ]; then
        ${SED_ERES} -i "$_SED_PATTERN_TIDY" "$outfile"
    fi
}

replacedall() {
    for f in "$DNSMASQ_CONFD"/vpn-nftset-gen_*.conf; do
        [ -f "$f" ] || continue
        md5sum "$f" | awk '{print $1}' >> "$DNSMASQ_CONFD/vpn-nftset-old.md5sum"
    done
    rm -rf "$DNSMASQ_CONFD"/vpn-nftset-gen_*.conf.old

    for f in "$DNSMASQ_CONFD"/vpn-nftset-gen_*.conf.new; do
        [ -f "$f" ] || continue
        newf=$(echo "$f" | sed 's/.conf.new/.conf/g')
        mv "$f" "$newf"
        md5sum "$newf" | awk '{print $1}' >> "$DNSMASQ_CONFD/vpn-nftset-new.md5sum"
    done
    ret=0
    if [ -f "$DNSMASQ_CONFD/vpn-nftset-old.md5sum" ]; then
        md51=$(sort "$DNSMASQ_CONFD/vpn-nftset-old.md5sum" | md5sum | awk '{print $1}')
        md52=$(sort "$DNSMASQ_CONFD/vpn-nftset-new.md5sum" | md5sum | awk '{print $1}')
        [ "$md51" != "$md52" ]
        ret=$?
    fi
    rm -rf "$DNSMASQ_CONFD"/vpn-nftset-*.md5sum
    return "$ret"
}

generate_from_gfwlist() {
    url=$1
    id=$(echo "$url" | md5sum | awk '{print $1}')
    rm -rf "$tmp_dir"
    tmp_dir="/tmp/vpn-nftset-rulegenerator.GFW"
    mkdir -p $tmp_dir

    if command -v curl >/dev/null; then
        curl -s -L "$url" -o "$tmp_dir/gfwlist.txt" || return
    else
        wget -q "$url" -O "$tmp_dir/gfwlist.txt" || return
    fi
    $BASE64_DECODE_CMD "$tmp_dir/gfwlist.txt" > "$tmp_dir/decoded.txt"
    # Ref: https://github.com/cokebar/gfwlist2dnsmasq/blob/3b5e3560ede7d1b0a1d02157576822752c48e671/gfwlist2dnsmasq.sh#L242
    IGNORE_PATTERN='^\!|\[|^@@|(https?://){0,1}[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'
    HEAD_FILTER_PATTERN='s#^(\|\|?)?(https?://+)?##g'
    TAIL_FILTER_PATTERN='s#/.*$|%2F.*$##g'
    DOMAIN_PATTERN='([a-zA-Z0-9][-a-zA-Z0-9]*(\.[a-zA-Z0-9][-a-zA-Z0-9]*)+)'
    HANDLE_WILDCARD_PATTERN='s#^(([a-zA-Z0-9]*\*[-a-zA-Z0-9]*)?(\.))?([a-zA-Z0-9][-a-zA-Z0-9]*(\.[a-zA-Z0-9][-a-zA-Z0-9]*)+)(\*[a-zA-Z0-9]*)?#\4#g'
    # shellcheck disable=SC2086
    grep -vE $IGNORE_PATTERN "$tmp_dir/decoded.txt" \
        | $SED_ERES $HEAD_FILTER_PATTERN \
        | $SED_ERES $TAIL_FILTER_PATTERN \
        | grep -E $DOMAIN_PATTERN \
        | $SED_ERES $HANDLE_WILDCARD_PATTERN \
        | sort -u > "$tmp_dir/domains.txt"

    apply_domains "$tmp_dir/domains.txt" "$id"
    rm -rf "$tmp_dir"
}

generate_from_domainlist() {
    url=$1
    id=$(echo "$url" | md5sum | awk '{print $1}')
    rm -rf "$tmp_dir"
    tmp_dir="/tmp/vpn-nftset-rulegenerator.N"
    mkdir -p $tmp_dir

    if command -v curl >/dev/null; then
        curl -s -L "$url" -o "$tmp_dir/domains.txt" || return
    else
        wget -q "$url" -O "$tmp_dir/domains.txt" || return
    fi
    apply_domains "$tmp_dir/domains.txt" "$id"
    rm -rf "$tmp_dir"
}


gfwlists=""
domainlists=""
while getopts ":w:u:i:s:d:f:h" arg; do
    case "$arg" in
        w)
            if [ -n "$gfwlists" ]; then
                gfwlists="$gfwlists $OPTARG"
            else
                gfwlists="$OPTARG"
            fi
            ;;
        u)
            if [ -n "$domainlists" ]; then
                domainlists="$domainlists $OPTARG"
            else
                domainlists="$OPTARG"
            fi
            ;;
        s)
            if [ -n "$DNS_SERVERS" ]; then
                DNS_SERVERS="$DNS_SERVERS,$OPTARG"
            else
                DNS_SERVERS="$OPTARG"
            fi
            ;;
        i)
            if [ -n "$NFTSET_NAMES" ]; then
                NFTSET_NAMES="$NFTSET_NAMES,$OPTARG"
            else
                NFTSET_NAMES="$OPTARG"
            fi
            ;;
        d)
            DNSMASQ_CONFD=$OPTARG
            ;;
        h)
            usage 0
            ;;
        *)
            usage 1
            ;;
    esac
done

if [ -z "${gfwlists}" ] && [ -z "${domainlists}" ]; then
    echo "GFWLists or domains list required"
    usage 1
fi
if [ -z "${NFTSET_NAMES}" ]; then
    echo "nftset name required"
    usage 1
fi
if [ -n "${gfwlists}" ] && ! command -v base64 >/dev/null; then
    echo "base64 command not found, (e.g. openwrt: opkg install coreutils-base64)"
fi

generate_sed_tidy_pattern_from_config_file
echo "sed pattern with existing domains: $_SED_PATTERN_TIDY"
mkdir -p "$DNSMASQ_CONFD"
IFS=' '
for url in ${gfwlists}; do
    echo "processing GFWList: $url"
    generate_from_gfwlist "$url"
done
for url in ${domainlists}; do
    echo "processing DomainList: $url"
    generate_from_domainlist "$url"
done
if replacedall; then
    echo "reload dnsmasq"
    /etc/init.d/dnsmasq restart > /dev/null 2>&1
fi

# vim: set ft=sh
